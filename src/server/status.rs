#[derive(Debug)]
pub enum Status {
    Continue,
    SwitchingProtocols,
    Processing,
    EarlyHints,
    OK,
    Created,
    Accepted,
    NonAuthoritativeInformation,
    NoContent,
    ResetContent,
    PartialContent,
    MultiStatus,
    AlreadyReported,
    IMUsed,
    MultipleChoices,
    MovedPermanently,
    Found,
    SeeOther,
    NotModified,
    UseProxy,
    SwitchProxy,
    TemporaryRedirect,
    PermanentRedirect,
    BadRequest,
    Unauthorized,
    PaymentRequired,
    Forbidden,
    NotFound,
    MethodNotAllowed,
    NotAcceptable,
    ProxyAuthenticationRequired,
    RequestTimeout,
    Conflict,
    Gone,
    LengthRequired,
    PreconditionFailed,
    PayloadTooLarge,
    URITooLong,
    UnsupportedMediaType,
    RangeNotSatisfiable,
    ExpectationFailed,
    MisdirectedRequest,
    UnprocessableEntity,
    Locked,
    FailedDependency,
    UpgradeRequired,
    PreconditionRequired,
    TooManyRequests,
    RequestHeaderFieldsTooLarge,
    UnavailableForLegalReasons,
    InternalServerError,
    NotImplemented,
    BadGateway,
    ServiceUnavailable,
    GatewayTimeout,
    HTTPVersionNotSupported,
    VariantAlsoNegotiates,
    InsufficientStorage,
    LoopDetected,
    NotExtended,
    NetworkAuthenticationRequired
}

impl Status {
    pub fn to_code(&self) -> u16 {
        match *self {
            Status::Continue => 100,
            Status::SwitchingProtocols => 101,
            Status::Processing => 102,
            Status::EarlyHints => 103,
            Status::OK => 200,
            Status::Created => 201,
            Status::Accepted => 202,
            Status::NonAuthoritativeInformation => 203,
            Status::NoContent => 204,
            Status::ResetContent => 205,
            Status::PartialContent => 206,
            Status::MultiStatus => 207,
            Status::AlreadyReported => 208,
            Status::IMUsed => 226,
            Status::MultipleChoices => 300,
            Status::MovedPermanently => 301,
            Status::Found => 302,
            Status::SeeOther => 303,
            Status::NotModified => 304,
            Status::UseProxy => 305,
            Status::SwitchProxy => 306,
            Status::TemporaryRedirect => 307,
            Status::PermanentRedirect => 308,
            Status::BadRequest => 400,
            Status::Unauthorized => 401,
            Status::PaymentRequired => 402,
            Status::Forbidden => 403,
            Status::NotFound => 404,
            Status::MethodNotAllowed => 405,
            Status::NotAcceptable => 406,
            Status::ProxyAuthenticationRequired => 407,
            Status::RequestTimeout => 408,
            Status::Conflict => 409,
            Status::Gone => 410,
            Status::LengthRequired => 411,
            Status::PreconditionFailed => 412,
            Status::PayloadTooLarge => 413,
            Status::URITooLong => 414,
            Status::UnsupportedMediaType => 415,
            Status::RangeNotSatisfiable => 416,
            Status::ExpectationFailed => 417,
            Status::MisdirectedRequest => 421,
            Status::UnprocessableEntity => 422,
            Status::Locked => 423,
            Status::FailedDependency => 424,
            Status::UpgradeRequired => 426,
            Status::PreconditionRequired => 428,
            Status::TooManyRequests => 429,
            Status::RequestHeaderFieldsTooLarge => 431,
            Status::UnavailableForLegalReasons => 451,
            Status::InternalServerError => 500,
            Status::NotImplemented => 501,
            Status::BadGateway => 502,
            Status::ServiceUnavailable => 503,
            Status::GatewayTimeout => 504,
            Status::HTTPVersionNotSupported => 505,
            Status::VariantAlsoNegotiates => 506,
            Status::InsufficientStorage => 507,
            Status::LoopDetected => 508,
            Status::NotExtended => 510,
            Status::NetworkAuthenticationRequired => 511
        }
    }

    pub fn to_message(&self) -> &[u8] {
        match *self {
            Status::Continue => b"Continue",
            Status::SwitchingProtocols => b"Switching Protocols",
            Status::Processing => b"Processing",
            Status::EarlyHints => b"Early Hints",
            Status::OK => b"OK",
            Status::Created => b"Created",
            Status::Accepted => b"Accepted",
            Status::NonAuthoritativeInformation => b"Non-Authoritative Information",
            Status::NoContent => b"No Content",
            Status::ResetContent => b"Reset Content",
            Status::PartialContent => b"Partial Content",
            Status::MultiStatus => b"Multi-Status",
            Status::AlreadyReported => b"Already Reported",
            Status::IMUsed => b"IM Used",
            Status::MultipleChoices => b"Multiple Choices",
            Status::MovedPermanently => b"Moved Permanently",
            Status::Found => b"Found",
            Status::SeeOther => b"See Other",
            Status::NotModified => b"Not Modified",
            Status::UseProxy => b"Use Proxy",
            Status::SwitchProxy => b"Switch Proxy",
            Status::TemporaryRedirect => b"Temporary Redirect",
            Status::PermanentRedirect => b"Permanent Redirect",
            Status::BadRequest => b"Bad Request",
            Status::Unauthorized => b"Unauthorized",
            Status::PaymentRequired => b"Payment Required",
            Status::Forbidden => b"Forbidden",
            Status::NotFound => b"Not Found",
            Status::MethodNotAllowed => b"Method Not Allowed",
            Status::NotAcceptable => b"Not Acceptable",
            Status::ProxyAuthenticationRequired => b"Proxy Authentication Required",
            Status::RequestTimeout => b"Request Timeout",
            Status::Conflict => b"Conflict",
            Status::Gone => b"Gone",
            Status::LengthRequired => b"Length Required",
            Status::PreconditionFailed => b"Precondition Failed",
            Status::PayloadTooLarge => b"Payload Too Large",
            Status::URITooLong => b"URI Too Long",
            Status::UnsupportedMediaType => b"Unsupported Media Type",
            Status::RangeNotSatisfiable => b"Range Not Satisfiable",
            Status::ExpectationFailed => b"Expectation Failed",
            Status::MisdirectedRequest => b"Misdirected Request",
            Status::UnprocessableEntity => b"Unprocessable Entity",
            Status::Locked => b"Locked",
            Status::FailedDependency => b"Failed Dependency",
            Status::UpgradeRequired => b"Upgrade Required",
            Status::PreconditionRequired => b"Precondition Required",
            Status::TooManyRequests => b"Too Many Requests",
            Status::RequestHeaderFieldsTooLarge => b"Request Header Fields Too Large",
            Status::UnavailableForLegalReasons => b"Unavailable For Legal Reasons",
            Status::InternalServerError => b"Internal Server Error",
            Status::NotImplemented => b"Not Implemented",
            Status::BadGateway => b"Bad Gateway",
            Status::ServiceUnavailable => b"Service Unavailable",
            Status::GatewayTimeout => b"Gateway Timeout",
            Status::HTTPVersionNotSupported => b"HTTP Version Not Supported",
            Status::VariantAlsoNegotiates => b"Variant Also Negotiates",
            Status::InsufficientStorage => b"Insufficient Storage",
            Status::LoopDetected => b"Loop Detected",
            Status::NotExtended => b"Not Extended",
            Status::NetworkAuthenticationRequired => b"Network Authentication Required"
        }
    }

    #[inline]
    pub fn code_bytes_len(&self) -> usize { 3 }
}